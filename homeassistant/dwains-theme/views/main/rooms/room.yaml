# dwains_theme

#Loop thought all the rooms in the room section
#First make a room page and then a page for each existing domain in that room

{% for room in _d_t_config.rooms %}
- title: {{ room["name"] }}
  path: {{ room["name"]|lower|replace(" ", "_") }}
  cards:   
    #Header
    - !include
      - ../../partials/header.yaml
      - title: {{ room["name"] }}
        subtitle: Rooms
        navigation_path: home  
    #Subheader with room information
    {% if room["motion"] or room["door"] or room["window"] %}
    - type: custom:mod-card
      style: |
        ha-card {
          background-color: var(--dwains-theme-header-background);
          margin-top: -25px;
          padding-top: 0px;
          padding-bottom: 4px;
        }
      card:
        type: custom:layout-card
        min_columns: 3
        max_columns: 3
        layout: horizontal
        justify_content: start
        cards:
          {% if room["motion"] %}
          - type: custom:button-card
            template: rooms_subheader
            entity: {{ room["motion"] }}
            name: Motion
            icon: 'far:walking'
            tap_action:
              !include 
                - ../../popups/more-info.yaml
                - entity: {{ room["motion"] }}
            label: >
              [[[
                function timeDifference(current, previous) {
                  var msPerMinute = 60 * 1000;
                  var msPerHour = msPerMinute * 60;
                  var msPerDay = msPerHour * 24;
                  var msPerMonth = msPerDay * 30;
                  var msPerYear = msPerDay * 365;

                  var elapsed = current - previous;

                  if (elapsed < msPerMinute) {
                      return Math.round(elapsed/1000) + ' sec ago';   
                  }
                  else if (elapsed < msPerHour) {
                      return Math.round(elapsed/msPerMinute) + ' min ago';   
                  }
                  else if (elapsed < msPerDay ) {
                      return Math.round(elapsed/msPerHour ) + ' h ago';   
                  }
                  else if (elapsed < msPerMonth) {
                      return Math.round(elapsed/msPerDay) + ' d ago';   
                  }
                  else if (elapsed < msPerYear) {
                      return Math.round(elapsed/msPerMonth) + ' m ago';   
                  }
                  else {
                      return Math.round(elapsed/msPerYear ) + ' y ago';   
                  }
                }
                if(entity.state == 'on'){
                  return 'Detected';
                } else {
                  return timeDifference(new Date(), new Date(entity.last_changed));
                }
              ]]]
          {% endif %}
          {% if room["door"] %}
          - type: custom:button-card
            template: rooms_subheader
            entity: {{ room["door"] }}
            icon: 'mdi:door-closed'
            state:
              - value: 'on'
                icon: 'mdi:door-open'
            tap_action:
              !include 
                - ../../popups/more-info.yaml
                - entity: {{ room["door"] }}
            {% if room["door"].split('.')[0] == 'binary_sensor' %}
            # this room has only 1 door
            name: Door
            label: >
              [[[ 
                if(entity.state == 'off'){
                  return 'Closed';
                } else {
                  return 'Open';
                }
              ]]] 
            {% else %}
            # this room has group of doors
            name: Doors
            label: >
              [[[
                const entitiesFromGroup = states['{{ room["door"] }}'].attributes['entity_id'];
                var openDoors = 0;
                entitiesFromGroup.forEach(function(entity){
                  if(states[entity].state == 'on'){
                    openDoors++;
                  }
                });  
                return ((openDoors >= 1) ? ((openDoors == 1) ? '1 door open' : openDoors + ' doors open') : 'Closed');
              ]]]
            {% endif %}
          {% endif %}
          {% if room["window"] %}
          - type: custom:button-card
            template: rooms_subheader
            entity: {{ room["window"] }}
            icon: 'mdi:window-closed-variant'
            state:
              - value: 'on'
                icon: 'mdi:window-open-variant'
            tap_action:
              !include 
                - ../../popups/more-info.yaml
                - entity: {{ room["window"] }}
            {% if room["window"].split('.')[0] == 'binary_sensor' %}
            # this room has only 1 window
            name: Window
            label: >
              [[[ 
                if(entity.state == 'off'){
                  return 'Closed';
                } else {
                  return 'Open';
                }
              ]]] 
            {% else %}
            # this room has group of windows
            name: Windows
            label: >
              [[[
                const entitiesFromGroup = states['{{ room["window"] }}'].attributes['entity_id'];
                var openWindows = 0;
                entitiesFromGroup.forEach(function(entity){
                  if(states[entity].state == 'on'){
                    openWindows++;
                  }
                });  
                return ((openWindows >= 1) ? ((openWindows == 1) ? '1 window open' : openWindows + ' windows open') : 'Closed');
              ]]]
            {% endif %}
          {% endif %}
          - type: custom:button-card
            color_type: blank-card
            aspect_ratio: 1/1
          - type: custom:button-card
            color_type: blank-card
            aspect_ratio: 1/1
      {% endif %}

    #Start for room content page
    #Lights
    - type: custom:mod-card
      style: |
        ha-card {
          padding: 16px 16px 20px 16px;
        }
      card:
        type: vertical-stack
        cards:
          #Card for lights (dwains-theme/plugins/button-cards-templates/rooms/child.yaml)
          {% if room["light"] %}
          - type: custom:button-card
            entity: {{ room["light"] }}
            template: rooms_child
            icon: 'far:lightbulb'
            styles:
              img_cell:
                - padding-left: 5px
                - width: 40px
            state:
              - value: 'on'
                icon: 'fas:lightbulb'
            {% if room["light"].split('.')[0] == 'light' %}
            # this room has only 1 light
            name: Light
            double_tap_action:
              action: toggle
              haptic: light 
            tap_action:
              !include 
                - ../../popups/light.yaml
                - entity: {{ room["light"] }}
            label: >
              [[[ 
                if(entity.state == 'off'){
                  return 'Off';
                } else {
                  return 'On ' + Math.round(((states['{{ room["light"] }}'].attributes.brightness/255)*100)) + '%';
                }
              ]]] 
            {% else %}
            # this room has group of lights
            name: Lights
            tap_action: 
              action: navigate
              navigation_path: {{ room["name"]|lower|replace(" ", "_") }}_lights
            double_tap_action:
              action: toggle
              haptic: light 
            label: >
              [[[
                const entitiesFromGroup = states['{{ room["light"] }}'].attributes['entity_id'];
                var onLights = 0;
                entitiesFromGroup.forEach(function(entity){
                  if(states[entity].state == 'on'){
                    onLights++;
                  }
                });  
                return entitiesFromGroup.length + ' lights' + ((onLights >= 1) ? '<br>' + ((onLights == 1) ? '1 light on' : onLights + ' lights on') : '');
              ]]]
            {% endif %}
          {% endif %}

          #Card for climate (dwains-theme/plugins/button-cards-templates/rooms/child.yaml)
          {% if room["climate"] or room["temperature"] %}
          - type: custom:button-card
            entity: {{ room["climate"] if room["climate"] else room["temperature"] }}
            template: rooms_child
            icon: 'fas:thermometer-three-quarters'
            styles:
              img_cell:
                - padding-left: 8px
                - width: 37px
            name: Temperature
            tap_action: 
              action: navigate
              navigation_path: {{ room["name"]|lower|replace(" ", "_") }}_climate
            {% if room["climate"] %}
            label: >
              [[[ 
                if (entity.attributes.hvac_action  == 'idle')
                  return entity.attributes.current_temperature + '° <br>Stand-by';
                else if(entity.attributes.hvac_action == 'heating')
                  return entity.attributes.current_temperature + '° <br>Heating to ' + entity.attributes.temperature + '°';
                else if(entity.attributes.hvac_action == 'off')
                  return entity.attributes.current_temperature + '° <br>Off';
              ]]] 
            {% else %}
            label: >
              [[[
                return (Math.round(states['{{ room["temperature"] }}'].state * 10) / 10) + '°'
              ]]] 
            {% endif %}
          {% endif %}

          #Card for covers (dwains-theme/plugins/button-cards-templates/rooms/child.yaml)
          {% if room["cover"] %}
          - type: custom:button-card
            entity: {{ room["cover"] }}
            template: rooms_child
            icon: 'mdi:window-shutter'
            tap_action: 
              action: navigate
              navigation_path: {{ room["name"]|lower|replace(" ", "_") }}_cover
            {% if room["cover"].split('.')[0] == 'cover' %}
            name: Cover
            label: >
              [[[ 
                if(entity.state == 'closed'){
                  return 'Closed';
                } else {
                  return 'Open ' + states['{{ room["cover"] }}'].attributes.current_position + '%';
                }
              ]]] 
            {% else %}
            name: Covers
            label: >
              [[[ 
                const entitiesFromGroup = states['{{ room["cover"] }}'].attributes['entity_id'];
                var openCovers = 0;
                var stateText = '';
                entitiesFromGroup.forEach(function(entity){
                  if(states[entity].state == 'open'){
                    openCovers++;
                    stateText += '<br>1 open ' + states[entity].attributes.current_position + '%';
                  }
                });  
                return entitiesFromGroup.length + ' covers' + ((openCovers >= 1) ? stateText : '');
              ]]]      
            {% endif %}
          {% endif %}

          #Card for devices (dwains-theme/plugins/button-cards-templates/rooms/child.yaml)
          {% if room["device"] %}
          - type: custom:button-card
            entity: {{ room["device"] }}
            template: rooms_child
            icon: 'mdi:power-plug'
            {% if room["device"].split('.')[0] == 'light' %}
            # this room has only 1 device
            name: Device
            label: >
              [[[ 
                if(entity.state == 'off'){
                  return 'Off';
                } else {
                  return 'On';
                }
              ]]] 
            {% else %}
            # this room has group of devices
            name: Devices
            label: >
              [[[
                const entitiesFromGroup = states['{{ room["device"] }}'].attributes['entity_id'];
                var onDevices = 0;
                entitiesFromGroup.forEach(function(entity){
                  if(states[entity].state == 'on'){
                    onDevices++;
                  }
                });  
                return entitiesFromGroup.length + ' devices' + ((onDevices >= 1) ? '<br>' + ((onDevices == 1) ? '1 device on' : onDevices + ' devices on') : '');
              ]]]
            tap_action: 
              action: navigate
              navigation_path: {{ room["name"]|lower|replace(" ", "_") }}_devices
            {% endif %}
          {% endif %}

          #Card for media players (dwains-theme/plugins/button-cards-templates/rooms/child.yaml)
          {% if room["media_player"] %}
          - type: custom:button-card
            entity: {{ room["media_player"] }}
            template: rooms_child
            icon: 'fas:tv'
            {% if room["media_player"].split('.')[0] == 'media_player' %}
            # this room has only 1 media player
            name: Media player
            tap_action:
              !include 
                - ../../popups/more-info.yaml
                - entity: {{ room["media_player"] }}
            label: >
              [[[ 
                return entity.state;
              ]]] 
            {% else %}
            # this room has group of media players
            name: Media players
            label: >
              [[[
                const entitiesFromGroup = states['{{ room["media_player"] }}'].attributes['entity_id'];
                var onDevices = 0;
                entitiesFromGroup.forEach(function(entity){
                  if(states[entity].state == 'on'){
                    onDevices++;
                  }
                });  
                return entitiesFromGroup.length + ' media players' + ((onDevices >= 1) ? '<br>' + ((onDevices == 1) ? '1 media player on' : onDevices + ' media players on') : '');
              ]]]
            tap_action: 
              action: navigate
              navigation_path: {{ room["name"]|lower|replace(" ", "_") }}_media_players
            {% endif %}
          {% endif %}

          #Card for vacuums (dwains-theme/plugins/button-cards-templates/rooms/child.yaml)
          {% if room["vacuum"] %}
          - type: custom:button-card
            entity: {{ room["vacuum"]["entity"] }}
            template: rooms_child
            name: Vacuum
            icon: 'mdi:robot-vacuum'
            tap_action: 
              action: navigate
              navigation_path: {{ room["name"]|lower|replace(" ", "_") }}_vacuum
            label: >
              [[[ 
                return entity.state;
              ]]]
            
          {% endif %}

          #Card for plants (dwains-theme/plugins/button-cards-templates/rooms/child.yaml)
          {% if room["plant"] %}
          - type: custom:button-card
            entity: {{ room["plant"] }}
            template: rooms_child
            icon: 'far:leaf'
            {% if room["plant"].split('.')[0] == 'plant' %}
            # this room has only 1 plant
            name: Plant
            tap_action:
              !include 
                - ../../popups/more-info.yaml
                - entity: {{ room["plant"] }}
            label: >
              [[[ 
                return entity.state;
              ]]] 
            {% else %}
            # this room has group of windows
            name: Plants
            {% endif %}
          {% endif %}
{% endfor %}